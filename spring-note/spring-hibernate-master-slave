1、一个AbstractRoutingDataSource类控制使用哪个target datasource
public class MasterSlaveRoutingDataSource extends AbstractRoutingDataSource {
	private staic transient Log logger = LogFactory.getLog(this.class);

	public static void ThreadLocal<DbType> contextHolder = new ThreadLocal<DbType>();
	public static void setDbType(DbType type) {
		contextHolder.set(type);
	}
	public static DbType getDbType() {
		return contextHolder.get();
	}
	public static void clearCustomerType() {
		contextHolder.remove();
	}

	protected Object determineCurrentLookupKey() {
		Object object = contextHolder.get();
		if(logger.isDebugEnabled()) {
			logger.debug("----the current data source is: " + object);
		}
		return null != object : object : ObType.Slave;
	}

	public boolean isWrapperFor(Class iface) throws SQLException {
		return false;
	}

	public Object unwrap(Class iface) throws SQLException {
		return null;
	}
2、filter复写原来osiv的doFilterInternal方法
	public class MsOpenSessionInViewFilter extends OpenSessionInViewFilter {
		private static final String SLAVE_METHOD = "get";
		private static final String HIDDEN_FIELD_NAME = "hiddenPostSearch_001";

		protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException{
			if(SLACE_METHOD.equals(request.getMethod()) 
			|| SLAVE_METHOD.equals(request.getParameter(HIDDEN_FIELD_NAME))) {
				MasterSlaveRoutingDataSource.setDbType(DbType.Slave);
			} else {
				MasterSlaveRoutingDataSource.setDbType(DbType.Master);
			}
			super.doFilterInternal(request, response, filterChain);
		}
	}
3、spring配置文件：
	<bean id="dataSources" class="xx.xxx.MasterSlaveRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="com.xx.DbType">
				<entry key="Master" value-ref="writeDataSource"/>
				<entry key="Slave" value-ref="readDataSource"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSources"
	</bean>














}
